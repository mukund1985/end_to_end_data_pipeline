name: Update Backend Configuration and Deploy

on:
  workflow_dispatch:
    inputs:
      resource_group_name:
        description: 'Resource Group Name'
        required: true
      storage_account_name:
        description: 'Storage Account Name'
        required: true
      container_name:
        description: 'Storage Container Name'
        required: true

jobs:
  update_backend_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Azure authentication for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          # Note: ARM_ACCESS_KEY is used for the AzureRM backend authentication
          echo "ARM_ACCESS_KEY=${{ secrets.STORAGE_ACCOUNT_ACCESS_KEY }}" >> $GITHUB_ENV

      - name: Update backend.tf File
        run: |
          ./Scripts/setup_backend.sh "${{ github.event.inputs.resource_group_name }}" "${{ github.event.inputs.storage_account_name }}" "${{ github.event.inputs.container_name }}"
        working-directory: ${{ github.workspace }}

      - name: Commit and Push backend.tf to Repository
        run: |
          git config --local user.name "mukund1985"
          git config --local user.email "mukund.pandey@gmail.com"
          git add Terraform/backend.tf
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update backend.tf with Azure storage account details"
            BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
            git -c http.extraheader="AUTHORIZATION: bearer ${{ secrets.GITHUB_TOKEN }}" push origin HEAD:$BRANCH_NAME --force
          fi
        working-directory: ${{ github.workspace }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init
        working-directory: ./Terraform

      - name: Terraform Plan
        run: terraform plan -var="resource_group_name=${{ github.event.inputs.resource_group_name }}" -var="storage_account_name=${{ github.event.inputs.storage_account_name }}" -var="container_name=${{ github.event.inputs.container_name }}" -out=tfplan
        working-directory: ./Terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./Terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
